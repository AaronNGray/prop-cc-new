///////////////////////////////////////////////////////////////////////////////
//
//  This file implements some basic AST manipulation routines
//
///////////////////////////////////////////////////////////////////////////////

#include <cstdlib>
#include "basics.ph"
#include "ast.ph"

///////////////////////////////////////////////////////////////////////////////
//
//  Select the ith component from an expression list
//
///////////////////////////////////////////////////////////////////////////////

Exp component_std::exp(Exps exps, int n)
{
  Exps es = exps;
  int  i  = n;
  match while (es)
  { #[h ... _] | i == 1: { return h; }
  | #[_ ... t]:          { es = t; i--; }
  }
  error( "%Lexpression %e does not have component %i\n", TUPLEstd::exp(exps), n);
  return NOexp;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Select the ith component from an expression list
//
///////////////////////////////////////////////////////////////////////////////

Exp component_std::exp(Exps exps, Id n)
{
  return component_std::exp(exps,std::atol(n+1));
}

///////////////////////////////////////////////////////////////////////////////
//
//  Select the ith component from a labeled expression list
//
///////////////////////////////////////////////////////////////////////////////

Exp component_std::exp( LabExps labeled_exps, Id n)
{
  LabExps les = labeled_exps;
  match while (les)
  {  #[ {label, exp} ... _] | label == n: { return exp; }
  |  #[ _ ... t]: { les = t; }
  }
  error( "%Lexpression %e does not have component %s\n",
         RECORDstd::exp(labeled_exps), n);
  return NOexp;
}
